{"version":3,"sources":["ng://ckeditor4-angular/ckeditor.helpers.ts","ng://ckeditor4-angular/ckeditor.ts","ng://ckeditor4-angular/ckeditor.component.ts","ng://ckeditor4-angular/ckeditor.module.ts"],"names":["promise","CKEditor4","Object","defineProperty","CKEditorComponent","prototype","this","_data","data","instance","setData","getData","readOnly","_readOnly","isReadOnly","setReadOnly","ngAfterViewInit","_this","getEditorNamespace","editorURL","length","TypeError","window","Promise","resolve","CKEDITOR","scriptResolve","scriptReject","loadScript","err","undefined","editorUrl","then","ngZone","runOutsideAngular","createEditor","bind","catch","console","error","ngOnDestroy","destroy","writeValue","value","registerOnChange","callback","onChange","registerOnTouched","onTouched","element","createInitialElement","config","ensureDivareaPlugin","type","inline","replace","once","evt","wrapper","removeAttribute","elementRef","nativeElement","appendChild","subscribe","undo","undoManager","lock","fire","unlock","run","ready","emit","editor","on","focus","blur","newData","change","dataChange","extraPlugins","removePlugins","removePlugin","concat","includes","warn","assign","plugins","toRemove","isString","split","filter","plugin","join","document","createElement","tagName","setAttribute","body","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","NgZone","Input","Output","EventEmitter","Config","EventInfo","NgModule","imports","FormsModule","CommonModule","declarations","exports","CKEditorModule"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport loadScript from 'load-script';\n\ndeclare let CKEDITOR: any;\nlet promise;\n\nexport function getEditorNamespace( editorURL: string ): Promise<{ [ key: string ]: any; }> {\n\tif ( editorURL.length < 1 ) {\n\t\tthrow new TypeError( 'CKEditor URL must be a non-empty string.' );\n\t}\n\n\tif ( 'CKEDITOR' in window ) {\n\t\treturn Promise.resolve( CKEDITOR );\n\t} else if ( !promise ) {\n\t\tpromise = new Promise( ( scriptResolve, scriptReject ) => {\n\t\t\tloadScript( editorURL, err => {\n\t\t\t\tif ( err ) {\n\t\t\t\t\tscriptReject( err );\n\t\t\t\t} else {\n\t\t\t\t\tscriptResolve( CKEDITOR );\n\t\t\t\t\tpromise = undefined;\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn promise;\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Basic typings for the CKEditor4 elements.\n */\nexport namespace CKEditor4 {\n\n\t/**\n\t * The CKEditor4 editor constructor.\n\t */\n\texport interface Config {\n\t\t[ key: string ]: any;\n\t}\n\n\t/**\n\t * The CKEditor4 editor interface type.\n\t * See https://ckeditor.com/docs/ckeditor4/latest/guide/dev_uitypes.html\n\t * to learn more.\n\t */\n\texport const enum EditorType {\n\t\tDIVAREA = 'divarea',\n\t\tINLINE = 'inline'\n\t}\n\n\t/**\n\t * The event object passed to CKEditor4 event callbacks.\n\t *\n\t * See https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_eventInfo.html\n\t * to learn more.\n\t */\n\texport interface EventInfo {\n\t\treadonly name: string;\n\t\treadonly editor: any;\n\t\treadonly data: {\n\t\t\t[ key: string ]: any;\n\t\t};\n\t\treadonly listenerData: {\n\t\t\t[ key: string ]: any;\n\t\t};\n\t\treadonly sender: {\n\t\t\t[ key: string ]: any;\n\t\t};\n\n\t\tcancel(): void;\n\n\t\tremoveListener(): void;\n\n\t\tstop(): void;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport {\n\tComponent,\n\tNgZone,\n\tInput,\n\tOutput,\n\tEventEmitter,\n\tforwardRef,\n\tElementRef,\n\tAfterViewInit, OnDestroy\n} from '@angular/core';\n\nimport {\n\tControlValueAccessor,\n\tNG_VALUE_ACCESSOR\n} from '@angular/forms';\n\nimport { getEditorNamespace } from './ckeditor.helpers';\n\nimport { CKEditor4 } from './ckeditor';\n\ndeclare let CKEDITOR: any;\n\n@Component( {\n\tselector: 'ckeditor',\n\ttemplate: '<ng-template></ng-template>',\n\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef( () => CKEditorComponent ),\n\t\t\tmulti: true,\n\t\t}\n\t]\n} )\nexport class CKEditorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {\n\t/**\n\t * The configuration of the editor.\n\t * See https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_config.html\n\t * to learn more.\n\t */\n\t@Input() config?: CKEditor4.Config;\n\n\t/**\n\t * Tag name of the editor component.\n\t *\n\t * The default tag is `textarea`.\n\t */\n\t@Input() tagName = 'textarea';\n\n\t/**\n\t * The type of the editor interface.\n\t *\n\t * By default editor interface will be initialized as `divarea` editor which is an inline editor with fixed UI.\n\t * You can change interface type by choosing between `divarea` and `inline` editor interface types.\n\t *\n\t * See https://ckeditor.com/docs/ckeditor4/latest/guide/dev_uitypes.html\n\t * and https://ckeditor.com/docs/ckeditor4/latest/examples/fixedui.html\n\t * to learn more.\n\t */\n\t@Input() type: CKEditor4.EditorType = CKEditor4.EditorType.DIVAREA;\n\n\t/**\n\t * Keeps track of the editor's data.\n\t *\n\t * It's also decorated as an input which is useful when not using the ngModel.\n\t *\n\t * See https://angular.io/api/forms/NgModel to learn more.\n\t */\n\t@Input() set data( data: string ) {\n\t\tif ( data === this._data ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.instance ) {\n\t\t\tthis.instance.setData( data );\n\t\t\t// Data may be changed by ACF.\n\t\t\tthis._data = this.instance.getData();\n\t\t\treturn;\n\t\t}\n\n\t\tthis._data = data;\n\n\t}\n\n\tget data(): string {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * When set `true`, the editor becomes read-only.\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#property-readOnly\n\t * to learn more.\n\t */\n\t@Input() set readOnly( isReadOnly: boolean ) {\n\t\tif ( this.instance ) {\n\t\t\tthis.instance.setReadOnly( isReadOnly );\n\t\t\treturn;\n\t\t}\n\n\t\t// Delay setting read-only state until editor initialization.\n\t\tthis._readOnly = isReadOnly;\n\t}\n\n\tget readOnly(): boolean {\n\t\tif ( this.instance ) {\n\t\t\treturn this.instance.readOnly;\n\t\t}\n\n\t\treturn this._readOnly;\n\t}\n\n\t/**\n\t * Fires when the editor is ready. It corresponds with the `editor#instanceReady`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-instanceReady\n\t * event.\n\t */\n\t@Output() ready = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the content of the editor has changed. It corresponds with the `editor#change`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-change\n\t * event. For performance reasons this event may be called even when data didn't really changed.\n\t */\n\t@Output() change = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the content of the editor has changed. In contrast to `change` - only emits when\n\t * data really changed thus can be successfully used with `[data]` and two way `[(data)]` binding.\n\t *\n\t * See more: https://angular.io/guide/template-syntax#two-way-binding---\n\t */\n\t@Output() dataChange = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the editing view of the editor is focused. It corresponds with the `editor#focus`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-focus\n\t * event.\n\t */\n\t@Output() focus = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * Fires when the editing view of the editor is blurred. It corresponds with the `editor#blur`\n\t * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-blur\n\t * event.\n\t */\n\t@Output() blur = new EventEmitter<CKEditor4.EventInfo>();\n\n\t/**\n\t * The instance of the editor created by this component.\n\t */\n\tinstance: any;\n\n\t/**\n\t * Wrapper element used to initialize editor.\n\t */\n\twrapper: HTMLElement;\n\n\t/**\n\t * If the component is readâonly before the editor instance is created, it remembers that state,\n\t * so the editor can become readâonly once it is ready.\n\t */\n\tprivate _readOnly: boolean = null;\n\n\t/**\n\t * A callback executed when the content of the editor changes. Part of the\n\t * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n\t *\n\t * Note: Unset unless the component uses the `ngModel`.\n\t */\n\tonChange?: ( data: string ) => void;\n\n\t/**\n\t * A callback executed when the editor has been blurred. Part of the\n\t * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n\t *\n\t * Note: Unset unless the component uses the `ngModel`.\n\t */\n\tonTouched?: () => void;\n\n\tprivate _data: string = null;\n\n\t/**\n\t * CKEditor 4 script url address. Script will be loaded only if CKEDITOR namespace is missing.\n\t *\n\t * Defaults to 'https://cdn.ckeditor.com/4.12.1/standard-all/ckeditor.js'\n\t */\n\t@Input() editorUrl = 'https://cdn.ckeditor.com/4.12.1/standard-all/ckeditor.js';\n\n\tconstructor( private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone ) {\n\t}\n\n\tngAfterViewInit(): void {\n\t\tgetEditorNamespace( this.editorUrl ).then( () => {\n\t\t\tthis.ngZone.runOutsideAngular( this.createEditor.bind( this ) );\n\t\t} ).catch( window.console.error );\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.ngZone.runOutsideAngular( () => {\n\t\t\tif ( this.instance ) {\n\t\t\t\tthis.instance.destroy();\n\t\t\t\tthis.instance = null;\n\t\t\t}\n\t\t} );\n\t}\n\n\twriteValue( value: string ): void {\n\t\tthis.data = value;\n\t}\n\n\tregisterOnChange( callback: ( data: string ) => void ): void {\n\t\tthis.onChange = callback;\n\t}\n\n\tregisterOnTouched( callback: () => void ): void {\n\t\tthis.onTouched = callback;\n\t}\n\n\tprivate createEditor(): void {\n\t\tconst element = this.createInitialElement();\n\n\t\tthis.config = this.ensureDivareaPlugin( this.config || {} );\n\n\t\tconst instance = this.type === CKEditor4.EditorType.INLINE ?\n\t\t\tCKEDITOR.inline( element, this.config )\n\t\t\t: CKEDITOR.replace( element, this.config );\n\n\t\tinstance.once( 'instanceReady', function( evt ) {\n\t\t\tthis.instance = instance;\n\n\t\t\tthis.wrapper.removeAttribute( 'style' );\n\n\t\t\tthis.elementRef.nativeElement.appendChild( this.wrapper );\n\n\t\t\t// Read only state may change during instance initialization.\n\t\t\tthis.readOnly = this._readOnly !== null ? this._readOnly : this.instance.readOnly;\n\n\t\t\tthis.subscribe( this.instance );\n\n\t\t\tconst undo = instance.undoManager;\n\n\t\t\tif ( this.data !== null ) {\n\t\t\t\tundo && undo.lock();\n\t\t\t\tinstance.setData( this.data );\n\n\t\t\t\t// Locking undoManager prevents 'change' event.\n\t\t\t\t// Trigger it manually to updated bound data.\n\t\t\t\tif ( this.data !== instance.getData() ) {\n\t\t\t\t\tinstance.fire( 'change' );\n\t\t\t\t}\n\t\t\t\tundo && undo.unlock();\n\t\t\t}\n\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.ready.emit( evt );\n\t\t\t} );\n\t\t}, this );\n\t}\n\n\tprivate subscribe( editor: any ): void {\n\t\teditor.on( 'focus', evt => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tthis.focus.emit( evt );\n\t\t\t} );\n\t\t} );\n\n\t\teditor.on( 'blur', evt => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tif ( this.onTouched ) {\n\t\t\t\t\tthis.onTouched();\n\t\t\t\t}\n\n\t\t\t\tthis.blur.emit( evt );\n\t\t\t} );\n\t\t} );\n\n\t\teditor.on( 'change', evt => {\n\t\t\tthis.ngZone.run( () => {\n\t\t\t\tconst newData = editor.getData();\n\n\t\t\t\tthis.change.emit( evt );\n\n\t\t\t\tif ( newData === this.data ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._data = newData;\n\t\t\t\tthis.dataChange.emit( newData );\n\n\t\t\t\tif ( this.onChange ) {\n\t\t\t\t\tthis.onChange( newData );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\tprivate ensureDivareaPlugin( config: CKEditor4.Config ): CKEditor4.Config {\n\t\tlet { extraPlugins, removePlugins } = config;\n\n\t\textraPlugins = this.removePlugin( extraPlugins, 'divarea' ) || '';\n\t\textraPlugins = extraPlugins.concat( typeof extraPlugins === 'string' ? ',divarea' : 'divarea' );\n\n\t\tif ( removePlugins && removePlugins.includes( 'divarea' ) ) {\n\n\t\t\tremovePlugins = this.removePlugin( removePlugins, 'divarea' );\n\n\t\t\tconsole.warn( '[CKEDITOR] divarea plugin is required to initialize editor using Angular integration.' );\n\t\t}\n\n\t\treturn Object.assign( {}, config, { extraPlugins, removePlugins } );\n\t}\n\n\tprivate removePlugin( plugins: string | string[], toRemove: string ): string | string[] {\n\t\tif ( !plugins ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst isString = typeof plugins === 'string';\n\n\t\tif ( isString ) {\n\t\t\tplugins = ( plugins as string ).split( ',' );\n\t\t}\n\n\t\tplugins = ( plugins as string[] ).filter( plugin => plugin !== toRemove );\n\n\t\tif ( isString ) {\n\t\t\tplugins = ( plugins as string[] ).join( ',' );\n\t\t}\n\n\t\treturn plugins;\n\t}\n\n\tprivate createInitialElement(): HTMLElement {\n\t\t// Render editor outside of component so it won't be removed from DOM before `instanceReady`.\n\t\tthis.wrapper = document.createElement( 'div' );\n\t\tconst element = document.createElement( this.tagName );\n\n\t\tthis.wrapper.setAttribute( 'style', 'display:none;' );\n\n\t\tdocument.body.appendChild( this.wrapper );\n\t\tthis.wrapper.appendChild( element );\n\n\t\treturn element;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CKEditorComponent } from './ckeditor.component';\n\n@NgModule( {\n\timports: [ FormsModule, CommonModule ],\n\tdeclarations: [ CKEditorComponent ],\n\texports: [ CKEditorComponent ]\n} )\nexport class CKEditorModule {\n}\nexport * from './ckeditor';\nexport { CKEditorComponent } from './ckeditor.component';\n"]}